/*
	Ici je cr√©e un singleton. Je cr√©e une variable globale qui represente ma connexion ws.
	M√™me si elle est globale elle reste locale au fichier.
	Elle ne peut etre appel√©e que par les fonctions sp√©cifiques.
	Je fais √ßa pour avoir acces a ma connexions ws. Sinon elle serait perdue.
	Par exemple ici je la cr√©e dans dashboard.ts et la recupere plus tard dans game.ts
*/

import { friendInvit, gameInvit } from "./invite";
import { Router } from "../router";

export let socket: WebSocket | null = null;

export function getSocket(router: Router): Promise<WebSocket> {
	return new Promise((resolve, reject) => {
		console.log("üîß getSocket() appel√© - v√©rification de l'existence de la socket...");

		if (!socket) {
			console.log("üîå Tentative de cr√©ation d'une nouvelle connexion WebSocket vers ws://localhost:3000/ws");
			socket = new WebSocket("ws://localhost:3000/ws");

			console.log("üöÄ WebSocket cr√©√©e, √©tat actuel:", socket.readyState);
			console.log("Est ce qu'on passe ici ?")

			socket.onopen = () => {
				console.log("‚úÖ Socket connect√©e avec succ√®s");
				console.log("üìä √âtat de la socket:", socket?.readyState);
				resolve(socket!);
			};

			socket.onerror = (error) => {
				console.error("‚ùå Erreur de connexion WebSocket:", error);
				console.log("üìä √âtat de la socket:", socket?.readyState);
				reject(error);
			};

			socket.onclose = (event) => {
				console.log("üîå Socket ferm√©e");
				console.log("üìã Code:", event.code);
				console.log("üìã Raison:", event.reason);
				console.log("üìã Clean:", event.wasClean);
				socket = null; // Reset pour permettre une reconnexion
			};

			socket.onmessage = (event) => {
				const data = JSON.parse(event.data);
				console.log("üì® Message re√ßu du serveur:", data);

				if (data.type === "connection_confirmed") {
					console.log("‚úÖ Connexion WebSocket confirm√©e par le serveur pour l'utilisateur ID:", data.userId);
				}

				if (data.type === "info") {
					console.log("‚ÑπÔ∏è Info du serveur:", data.message);
				}

				if (data.type === "error") {
					console.error("‚ùå Erreur du serveur:", data.message);
				}

				if (data.type === "game_receive_invite") {
					console.log("Invitation re√ßue : ", data.from_name);
					gameInvit(socket!, data);
				}

				if (data.type === "friend_receive_invite") {
					console.log("Invitation re√ßue : ", data.from_name);
					friendInvit(socket!, data);
				}

				if (data.type === "room_ready") {
					console.log("Room number: ", data.roomId);
					router.navigate(`/game/${data.roomId}`);
				}

			}
		} else if (socket.readyState === WebSocket.OPEN) {
			console.log("üîÑ Socket existante d√©j√† ouverte");
			resolve(socket);
		} else if (socket.readyState === WebSocket.CONNECTING) {
			console.log("‚è≥ Socket existante en cours de connexion, attente...");
			socket.onopen = () => {
				console.log("‚úÖ Socket existante maintenant connect√©e");
				resolve(socket!);
			};
			socket.onerror = (error) => {
				reject(error);
			};
		} else {
			console.log("üîÑ Socket existante ferm√©e, cr√©ation d'une nouvelle...");
			socket = null;
			// Recursive call to create new socket
			resolve(getSocket(router));
		}
	});
}

// Fonction utilitaire pour envoyer des messages de mani√®re s√©curis√©e
export async function sendMessage(router: Router, message: any): Promise<void> {
	try {
		const ws = await getSocket(router);
		if (ws.readyState === WebSocket.OPEN) {
			ws.send(JSON.stringify(message));
			console.log("üì§ Message envoy√©:", message);
		} else {
			console.error("‚ùå WebSocket n'est pas ouverte, √©tat:", ws.readyState);
			throw new Error("WebSocket not ready");
		}
	} catch (error) {
		console.error("‚ùå Erreur lors de l'envoi du message:", error);
		throw error;
	}
}
